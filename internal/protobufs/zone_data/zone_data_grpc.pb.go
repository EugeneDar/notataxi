// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: zone_data.proto

package zone_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZoneDataServiceClient is the client API for ZoneDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneDataServiceClient interface {
	GetZoneData(ctx context.Context, in *ZoneDataRequest, opts ...grpc.CallOption) (*ZoneDataResponse, error)
}

type zoneDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneDataServiceClient(cc grpc.ClientConnInterface) ZoneDataServiceClient {
	return &zoneDataServiceClient{cc}
}

func (c *zoneDataServiceClient) GetZoneData(ctx context.Context, in *ZoneDataRequest, opts ...grpc.CallOption) (*ZoneDataResponse, error) {
	out := new(ZoneDataResponse)
	err := c.cc.Invoke(ctx, "/zone_data.ZoneDataService/GetZoneData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneDataServiceServer is the server API for ZoneDataService service.
// All implementations must embed UnimplementedZoneDataServiceServer
// for forward compatibility
type ZoneDataServiceServer interface {
	GetZoneData(context.Context, *ZoneDataRequest) (*ZoneDataResponse, error)
	mustEmbedUnimplementedZoneDataServiceServer()
}

// UnimplementedZoneDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZoneDataServiceServer struct {
}

func (UnimplementedZoneDataServiceServer) GetZoneData(context.Context, *ZoneDataRequest) (*ZoneDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneData not implemented")
}
func (UnimplementedZoneDataServiceServer) mustEmbedUnimplementedZoneDataServiceServer() {}

// UnsafeZoneDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneDataServiceServer will
// result in compilation errors.
type UnsafeZoneDataServiceServer interface {
	mustEmbedUnimplementedZoneDataServiceServer()
}

func RegisterZoneDataServiceServer(s grpc.ServiceRegistrar, srv ZoneDataServiceServer) {
	s.RegisterService(&ZoneDataService_ServiceDesc, srv)
}

func _ZoneDataService_GetZoneData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneDataServiceServer).GetZoneData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zone_data.ZoneDataService/GetZoneData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneDataServiceServer).GetZoneData(ctx, req.(*ZoneDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZoneDataService_ServiceDesc is the grpc.ServiceDesc for ZoneDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZoneDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zone_data.ZoneDataService",
	HandlerType: (*ZoneDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetZoneData",
			Handler:    _ZoneDataService_GetZoneData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zone_data.proto",
}
